services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    image: "postgres:15.2-bullseye"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "postgres:/var/lib/postgresql/data"

  web:
    build:
      context: "."
      args:
        - "UID=${UID:-1000}"
        - "GID=${GID:-1000}"
        - "DEBUG=${DEBUG:-false}"
        - "NODE_ENV=${NODE_ENV:-production}"
    depends_on:
      - "postgres"
    env_file:
      - ".env"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    tty: true
    volumes:
      - "./project:/app/"
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up/}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-127.0.0.1:8000}:${PORT:-8000}"

  cicd-api-tests:
    image: "postman/newman:5.3.1"
    entrypoint: "sh"
    command: "-c 'set -eu pipefail; until $(nc -zv web 8000); do printf '.'; sleep 5; done; newman run /src/postman-collection.json -e /src/docker.environment.json; exit 0'"
    volumes:
      - "./api-tests:/src/"
    depends_on:
      - "web"
        # condition: service_healthy

volumes:
  postgres: {}
